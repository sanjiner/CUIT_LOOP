package com.example.PCenter;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;

import javax.security.auth.PrivateCredentialPermission;

import org.apache.http.HttpResponse;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.DefaultHttpClient;

import android.R.integer;
import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Matrix;
import android.os.Bundle;
import android.os.Environment;
import android.os.Handler;
import android.os.Message;
import android.util.DisplayMetrics;
import android.util.Log;
import android.view.Display;
import android.view.KeyEvent;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.animation.AlphaAnimation;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.RelativeLayout.LayoutParams;
import android.widget.TextView;
import android.widget.ImageView.ScaleType;
import cn.trinea.android.common.entity.FailedReason;
import cn.trinea.android.common.service.impl.ImageCache;
import cn.trinea.android.common.service.impl.RemoveTypeLastUsedTimeFirst;
import cn.trinea.android.common.service.impl.ImageMemoryCache.OnImageCallbackListener;

import com.baidu.android.bbalbs.common.a.b;
import com.exam.ThreeSystem.R;
import com.example.PCenter.LazyScrollView;
import com.example.PCenter.LazyScrollView.OnScrollListener;

public class Homework_finishList_work extends BaseActivity implements OnClickListener{
	private String WorkName;
	private String WorkDesc;
	private String WorkScore;
	private String DeadTime;
	public static final int IMAGEVIEW_DEFAULT_HEIGHT = 400;
	private String WorkMemo;
	private SharedPreferences sp;
	private String FILE = Constant.USERINFO_SP;
	private TextView homeworkDetail_title;
	private TextView homeworkDetail_manfen;
	private TextView homeworkDetail_guoqi;
	private TextView homeworkDetail_text_content;//作业内容描述
	private TextView homeworkDetail_note;
	private TextView homework_isouttime_textview;
	private TextView homeworkDetail_datetime;
	private Button homework_homeworkDetail_back;
	private LinearLayout stu_work_daan_linearlayout;
	private LinearLayout allscore_LinearLayout;
	private LinearLayout stu_ImageView_LinearLayout;
	private EditText homeworkDetail_edit;
	private Button homeworkDetail_content;
	private Button homework_homeworkDetail_submit;
	private TextView homeworkDetail_teacher;
	private LinearLayout homeworkDetail_teacher_LinearLayout;
	private Thread mThread;
	private Bitmap smallBitmap;
	//private String URL="http://222.18.158.198:8016";
	private String URL="";
	private static String realurl;
	private static ImageView stu_homework_image_view;
	private String WorkURL;
	private Bitmap bitmap;
	public LayoutParams params;
	private Context context;
	public static final int COLUMNS = 3;
	private static final int MSG_SUCCESS = 0;// 获取图片成功的标识
	private static final int MSG_FAILURE = 1;// 获取图片失败的标识
	public static final ImageCache IMAGE_CACHE = new ImageCache(128, 512);
	public static final String TAG_CACHE = "image_cache";
	private LayoutInflater inflater;
	private DisplayMetrics dm;
	private static int width;
	private static int height;
	private int imageWidth;
	private static Bitmap bit;
	private com.example.PCenter.LazyScrollView scrollView;
	public static final String DEFAULT_CACHE_FOLDER = new StringBuilder()
	.append(Environment.getExternalStorageDirectory().getAbsolutePath()).append(File.separator)
	.append("StuExamSys").append(File.separator).append("ImageCache").toString();
	protected void onCreate(Bundle savedInstanceState)
	{
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_homework_homeworkdetail);
		mActivity = this;
		dm = new DisplayMetrics();
		getWindowManager().getDefaultDisplay().getMetrics(dm);
		width = dm.widthPixels; 
		height = dm.heightPixels;
		int verticalSpacing, horizontalSpacing;
		verticalSpacing = horizontalSpacing = getResources().getDimensionPixelSize(R.dimen.dp_4);
		Display display = mActivity.getWindowManager().getDefaultDisplay();
		imageWidth = (display.getWidth() - (COLUMNS + 1) * horizontalSpacing) / COLUMNS;
		
		
		TAG = mActivity.getClass().getSimpleName();
		sp = getSharedPreferences(FILE, MODE_PRIVATE);
		URL=Constant.URL;
		getViewObj();
		setListener();
		getdata();
		setText();
		//getimage();
		stu_homework_image_view.setScaleType(ScaleType.CENTER_CROP);
		stu_homework_image_view.setBackgroundResource(R.drawable.image_border);
		LinearLayout.LayoutParams layoutParams = (LinearLayout
				.LayoutParams) stu_homework_image_view
				.getLayoutParams();
		layoutParams.width = display.getWidth();
		layoutParams.height = (int) (display.getHeight() * 0.85);
		stu_homework_image_view.setLayoutParams(layoutParams);
		String pictureLink = realurl;
		IMAGE_CACHE.get(pictureLink, stu_homework_image_view);
	}
	
	
	private void getViewObj()
	{
		homeworkDetail_datetime=(TextView) findViewById(R.id.homeworkDetail_datetime);
		homeworkDetail_title=(TextView) findViewById(R.id.homeworkDetail_title);
		homeworkDetail_manfen=(TextView) findViewById(R.id.homeworkDetail_manfen);
		homeworkDetail_guoqi=(TextView) findViewById(R.id.homeworkDetail_guoqi);
		homeworkDetail_text_content=(TextView) findViewById(R.id.homeworkDetail_text_content);
		homeworkDetail_note=(TextView) findViewById(R.id.homeworkDetail_note);
		homework_homeworkDetail_back=(Button) findViewById(R.id.homework_homeworkDetail_back);
		stu_work_daan_linearlayout=(LinearLayout) findViewById(R.id.stu_work_daan_linearlayout);
		homeworkDetail_edit=(EditText) findViewById(R.id.homeworkDetail_edit);
		homeworkDetail_content=(Button) findViewById(R.id.homeworkDetail_content);
		homeworkDetail_teacher=(TextView) findViewById(R.id.homeworkDetail_teacher);
		homework_homeworkDetail_submit=(Button) findViewById(R.id.homework_homeworkDetail_submit);
		homework_isouttime_textview=(TextView) findViewById(R.id.homework_isouttime_textview);
		allscore_LinearLayout=(LinearLayout) findViewById(R.id.allscore_LinearLayout);
		homeworkDetail_teacher_LinearLayout=(LinearLayout) findViewById(R.id.homeworkDetail_teacher_LinearLayout);
		homeworkDetail_teacher_LinearLayout.setVisibility(View.GONE);
		stu_ImageView_LinearLayout=(LinearLayout) findViewById(R.id.stu_ImageView_LinearLayout);
		stu_homework_image_view=(ImageView) findViewById(R.id.stu_homework_image_view);
		//params = stu_homework_image_view.getLayoutParams();
		allscore_LinearLayout.setVisibility(View.GONE);
		homeworkDetail_guoqi.setVisibility(View.GONE);
		homework_isouttime_textview.setVisibility(View.GONE);
		homework_homeworkDetail_submit.setVisibility(View.GONE);
		homeworkDetail_edit.setVisibility(View.INVISIBLE);
		homeworkDetail_edit.setVisibility(View.GONE);
		homeworkDetail_content.setVisibility(View.GONE);
		homeworkDetail_teacher.setVisibility(View.GONE);
		stu_work_daan_linearlayout.setVisibility(View.INVISIBLE);
		stu_work_daan_linearlayout.setVisibility(View.GONE);
	}
	
	private void setListener()
	{
		homework_homeworkDetail_back.setOnClickListener(this);
	}
	
	private void getdata()
	{
		WorkName=Homework_tea_class_list_activity.WorkName;
		WorkDesc=Homework_tea_class_list_activity.WorkDesc;
		WorkScore=Homework_tea_class_list_activity.WorkScore;
		DeadTime=Homework_tea_class_list_activity.DeadTime;
		WorkMemo=Homework_tea_class_list_activity.Memo;
		WorkURL=Homework_tea_class_list_activity.WorkURL;
		if(WorkURL.equals(""))
		{
			stu_ImageView_LinearLayout.setVisibility(View.GONE);
		}
		realurl=URL+WorkURL;
	}
	private void setText()
	{
		homeworkDetail_title.setText(WorkName);
		homeworkDetail_datetime.setText(DeadTime);
		homeworkDetail_text_content.setText(WorkDesc);
		homeworkDetail_note.setText(WorkMemo);
	}
	@Override
	public void onClick(View v) {
		// TODO 自动生成的方法存根
		switch(v.getId())
		{
		case R.id.homework_homeworkDetail_back:
		{
			finish();
		}
		break;
		}
		
	}
	
	public void show_click(View v){
//	     startActivity(new Intent(this,ImageShower_detail.class));
	    }
	
	private void getimage()
	{
		mThread = new Thread(runnable);
		mThread.start();
		System.out.println(realurl);
		 

	}
	
	Runnable runnable = new Runnable()
	{

		@Override
		public void run() {
			// TODO 自动生成的方法存根
			HttpClient httpClient = new DefaultHttpClient();
			HttpGet httpGet = new HttpGet(realurl);
//			final Bitmap bitmap;
			try
			{
				HttpResponse httpResponse = httpClient.execute(httpGet);
				bitmap = BitmapFactory.decodeStream(httpResponse.getEntity().getContent());
				//smallBitmap=BitmapHelper.compressBitmap(bitmap, bitmap.getWidth(), bitmap.getHeight());
				//bitmap.recycle();
			}
			catch(Exception e)
			{
				mHandler.obtainMessage(MSG_FAILURE).sendToTarget();
				return;
			}
			mHandler.obtainMessage(MSG_SUCCESS, bitmap).sendToTarget();
		}
		
	};
	private Handler mHandler = new Handler()
	{
		public void handleMessage(Message msg)
		{
			switch (msg.what)
			{
			case MSG_SUCCESS:
				Display display = getWindowManager().getDefaultDisplay();
				params.height=bitmap.getHeight();
				params.width =bitmap.getWidth();
//				params.width = display.getWidth();
//				params.height = (int) (display.getHeight() * 0.618);
				stu_homework_image_view.setLayoutParams(params);
				stu_homework_image_view.setImageBitmap((Bitmap) msg.obj);
				
				break;
			case MSG_FAILURE:
				break;
			}
		}
	};
	
	static {
		
		/** init icon cache **/
		OnImageCallbackListener imageCallBack = new OnImageCallbackListener() {
			
			@Override
			public void onGetSuccess(String imageUrl, Bitmap loadedImage, View view, boolean isInCache) {
				 
				if (view != null && loadedImage != null) {
					bit=BitmapHelper.comp(loadedImage);
					loadedImage.recycle();
					ImageView imageView = (ImageView) view;
					imageView.setImageBitmap(bit);
					if (!isInCache) {
						
						imageView.startAnimation(getInAlphaAnimation(2000));
					}

				}
			}

			/**
			 * callback function before get image, run on ui thread
			 * 
			 * @param imageUrl
			 *            imageUrl
			 * @param view
			 *            view need the image
			 */
			@Override
			public void onPreGet(String imageUrl, View view) {
				// Log.e(TAG_CACHE, "pre get image");
			}

			/**
			 * callback function after get image failed, run on ui thread
			 * 
			 * @param imageUrl
			 *            imageUrl
			 * @param loadedImage
			 *            bitmap
			 * @param view
			 *            view need the image
			 * @param failedReason
			 *            failed reason for get image
			 */
			@Override
			public void onGetFailed(String imageUrl, Bitmap loadedImage, View view, FailedReason failedReason) {
				Log.e(TAG_CACHE,
						new StringBuilder(128).append("get image ").append(imageUrl)
								.append(" error, failed type is: ").append(failedReason.getFailedType())
								.append(", failed reason is: ").append(failedReason.getCause().getMessage())
								.toString());
			}

			@Override
			public void onGetNotInCache(String imageUrl, View view) {
				if (view != null && view instanceof ImageView) {
					((ImageView) view).setImageResource(R.drawable.not_loaded);// 等待载入时的图片
				}
			}
		};
		IMAGE_CACHE.setOnImageCallbackListener(imageCallBack);
		IMAGE_CACHE.setCacheFullRemoveType(new RemoveTypeLastUsedTimeFirst<Bitmap>());

		IMAGE_CACHE.setHttpReadTimeOut(10000);
		IMAGE_CACHE.setOpenWaitingQueue(true);
		IMAGE_CACHE.setValidTime(-1);
		/**
		 * close connection, default is connect keep-alive to reuse connection.
		 * if image is from different server, you can set this
		 */
		// IMAGE_CACHE.setRequestProperty("Connection", "false");
	}
	public static AlphaAnimation getInAlphaAnimation(long durationMillis) {
		AlphaAnimation inAlphaAnimation = new AlphaAnimation(0, 1);
		inAlphaAnimation.setDuration(durationMillis);
		return inAlphaAnimation;
	}
	@Override
	public boolean onKeyDown(int keyCode, KeyEvent event) {
		// TODO 自动生成的方法存根
		if (keyCode == KeyEvent.KEYCODE_BACK) {
			if(IMAGE_CACHE!=null)
			{
			IMAGE_CACHE.clear();
			}
			if(bit!=null)
			{
			bit.recycle();
			}
			finish();
             return false; 
        }else { 
            return super.onKeyDown(keyCode, event); 
        } 
	}
}
