package com.example.process.fragments;

import android.content.SharedPreferences;
import android.os.Bundle;
import android.os.Handler;
import android.os.Parcelable;
import android.support.v4.view.PagerAdapter;
import android.support.v4.view.ViewPager;
import android.support.v4.view.ViewPager.OnPageChangeListener;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.ImageView.ScaleType;
import android.widget.TextView;

import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;

import com.exam.ThreeSystem.R;
import com.example.PCenter.Constant;
import com.example.PCenter.fragments.BaseFragment;

public class HomeFragmentProcess extends BaseFragment {

	private String FILE = Constant.USERINFO_SP;
	private SharedPreferences sp;
	private ViewPager viewPager; // android-support-v4中的滑动组件  
    private List<ImageView> imageViews; // 滑动的图片集合    
    private String[] titles; // 图片标题  
    private int[] imageResId; // 图片ID  
    private List<View> dots; // 图片标题正文的那些点   
    private TextView tv_title;  
    private int currentItem = 0; // 当前图片的索引号   
    // An ExecutorService that can schedule commands to run after a given delay,  
    // or to execute periodically.  
    private ScheduledExecutorService scheduledExecutorService;
	
    // 切换当前显示的图片  
    private Handler handler = new Handler() {  
        public void handleMessage(android.os.Message msg) {
            viewPager.setCurrentItem(currentItem);// 切换当前显示的图片  
        };  
    }; 
	
	@Override
	public View onCreateView(LayoutInflater inflater, ViewGroup container,
			Bundle savedInstanceState) {
		View view = inflater.inflate(R.layout.activity_process_home, container, false);
		mActivity =  getActivity();
		
		imageResId = new int[] { R.drawable.ic_home_slide1, R.drawable.ic_home_slide2, R.drawable.ic_home_slide3};
        titles = new String[imageResId.length];
        titles[0] = "成绩";
        titles[1] = "约考";  
        titles[2] = "新闻";     
        imageViews = new ArrayList<ImageView>();   
        // 初始化图片资源  
        for (int i = 0; i < imageResId.length; i++) {  
            ImageView imageView = new ImageView(mActivity);  
            imageView.setImageResource(imageResId[i]);  
            imageView.setScaleType(ScaleType.CENTER_CROP);  
            imageViews.add(imageView);
        }             
        dots = new ArrayList<View>();  
        dots.add(view.findViewById(R.id.v_dot0));  
        dots.add(view.findViewById(R.id.v_dot1));  
        dots.add(view.findViewById(R.id.v_dot2)); 
        
        tv_title = (TextView) view.findViewById(R.id.tv_title);  
        tv_title.setText(titles[0]);//  
  
        viewPager = (ViewPager) view.findViewById(R.id.home_vp);  
        viewPager.setAdapter(new MyAdapter());// 设置填充ViewPager页面的适配器  
        // 设置一个监听器，当ViewPager中的页面改变时调用  
        viewPager.setOnPageChangeListener(new MyPageChangeListener());
		return view;
	}
	
	
	private void getViewObj(){
		
	}
	
	private void setListener(){
		
	}
	
	private void init(){
		
	}
	
	private void slide()
	{
		
	}
	
	@Override
	public void onStart() {  
        scheduledExecutorService = Executors.newSingleThreadScheduledExecutor();  
        // 当Activity显示出来后，每两秒钟切换一次图片显示  
        scheduledExecutorService.scheduleAtFixedRate(new ScrollTask(), 1, 2, TimeUnit.SECONDS);  
        super.onStart();  
    }  
  
    @Override
	public void onStop() {  
        // 当Activity不可见的时候停止切换  
        scheduledExecutorService.shutdown();  
        super.onStop();  
    }  
  
    /** 
     * 换行切换任务 
     *  
     * @author Administrator 
     *  
     */  
    private class ScrollTask implements Runnable {  
  
        public void run() {  
            synchronized (viewPager) {  
                System.out.println("currentItem: " + currentItem);  
                currentItem = (currentItem + 1) % imageViews.size();  
                handler.obtainMessage().sendToTarget(); // 通过Handler切换图片  
            }
        }
    }  
  
    /** 
     * 当ViewPager中页面的状态发生改变时调用 
     *  
     * @author Administrator 
     *  
     */  
    private class MyPageChangeListener implements OnPageChangeListener {  
        private int oldPosition = 0;  
  
        /** 
         * This method will be invoked when a new page becomes selected. 
         * position: Position index of the new selected page. 
         */  
        public void onPageSelected(int position) {  
            currentItem = position;  
            tv_title.setText(titles[position]);
            dots.get(oldPosition).setBackgroundResource(R.drawable.shape_home_dot_normal);  
            dots.get(position).setBackgroundResource(R.drawable.shape_home_dot_focused);
            oldPosition = position;  
        }  
  
        public void onPageScrollStateChanged(int arg0) {  
  
        }  
  
        public void onPageScrolled(int arg0, float arg1, int arg2) {  
  
        }  
    }  
  
    /** 
     * 填充ViewPager页面的适配器 
     *  
     * @author Administrator 
     *  
     */  
    private class MyAdapter extends PagerAdapter {  
  
        @Override  
        public int getCount() {  
            return imageResId.length;  
        }  
  
        @Override  
        public Object instantiateItem(View arg0, int arg1) {  
            ((ViewPager) arg0).addView(imageViews.get(arg1));  
            return imageViews.get(arg1);  
        }  
  
        @Override  
        public void destroyItem(View arg0, int arg1, Object arg2) {  
            ((ViewPager) arg0).removeView((View) arg2);  
        }  
  
        @Override  
        public boolean isViewFromObject(View arg0, Object arg1) {  
            return arg0 == arg1;  
        }  
  
        @Override  
        public void restoreState(Parcelable arg0, ClassLoader arg1) {  
  
        }  
  
        @Override  
        public Parcelable saveState() {  
            return null;  
        }  
  
        @Override  
        public void startUpdate(View arg0) {  
  
        }  
  
        @Override  
        public void finishUpdate(View arg0) {  
  
        }  
    }
	

}